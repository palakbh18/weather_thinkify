{"version":3,"sources":["components/Conditions/Conditions.module.css","components/CurrentWeather/CurrentWeather.module.css","logo.svg","components/Conditions/Conditions.js","components/CurrentWeather/CurrentWeather.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","temp_max","temp_min","CurrentWeather","useState","city","setCity","unit","setError","setLoading","setResponseObj","onSubmit","e","preventDefault","length","uriEncodedCity","encodeURIComponent","fetch","process","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","textInput","value","onChange","target","Button","Conditions","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,QAAU,8B,iBCA5BD,EAAOC,QAAU,CAAC,UAAY,kCAAkC,MAAQ,8BAA8B,OAAS,+BAA+B,MAAQ,8BAA8B,OAAS,+BAA+B,KAAO,+B,2HCDpN,I,mCCwBAC,EArBI,SAACC,GACjB,OACC,sBAAKC,UAAWC,IAAQC,QAAxB,UACSH,EAAMI,OAAS,uBAAOH,UAAWC,IAAQG,MAA1B,wCAEfL,EAAMM,SAAW,qBAAKL,UAAWC,IAAQK,SAGf,MAA1BP,EAAMQ,YAAYC,IAChB,gCACI,4BAAG,iCAAST,EAAMQ,YAAYE,SAC9B,iDAAoBC,KAAKC,MAAMZ,EAAMQ,YAAYK,KAAKC,MAAtD,6BAAuFd,EAAMQ,YAAYO,QAAQ,GAAGC,YAApH,qDACkDhB,EAAMQ,YAAYK,KAAKI,SADzE,4CAE2BjB,EAAMQ,YAAYK,KAAKK,SAFlD,yBAIN,S,gBCqDEC,EAjEQ,WAAO,IAAD,EACHC,mBAAS,IADN,mBACpBC,EADoB,KACdC,EADc,OAEHF,mBAAS,UAFN,mBAEpBG,EAFoB,aAGDH,oBAAS,IAHR,mBAGpBhB,EAHoB,KAGboB,EAHa,OAIGJ,oBAAS,GAJZ,mBAIpBd,EAJoB,KAIXmB,EAJW,OAKUL,mBAAS,IALnB,mBAKrBZ,EALqB,KAKRkB,EALQ,KA0C1B,OACC,gCACI,iEACI,uBAAMC,SArCf,SAA2BC,GAE1B,GADAA,EAAEC,iBACkB,IAAhBR,EAAKS,OACL,OAAON,GAAS,GAGpBA,GAAS,GACTE,EAAe,IAEfD,GAAW,GAEX,IAAIM,EAAiBC,mBAAmBX,GAExCY,MAAM,yDAAD,OAA0DV,EAA1D,cAAoEQ,EAApE,kBAtBKG,oCAsBiG,CACvG,OAAU,MACV,QAAW,CACP,OAAU,sBAGjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAC,GACF,GAAqB,MAAjBA,EAAS3B,IACT,MAAM,IAAI6B,MAEdZ,EAAeU,GACfX,GAAW,MAEdc,OAAM,SAAAC,GACHhB,GAAS,GACTC,GAAW,GACXgB,QAAQC,IAAIF,EAAIG,aAOX,UACI,uBACIC,KAAK,OACLC,YAAY,aACZC,UAAU,KACV7C,UAAWC,IAAQ6C,UACnBC,MAAO3B,EACP4B,SAAU,SAACrB,GAAD,OAAON,EAAQM,EAAEsB,OAAOF,UAElC,wBAAS/C,UAAWC,IAAQiD,OAAQP,KAAK,SAAzC,oCAEZ,cAACQ,EAAD,CACI5C,YAAaA,EACbJ,MAAOA,EACPE,QAASA,QC3CN+C,MAhBf,WACE,OACE,sBAAKpD,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACA,8DAEA,+BACG,cAAC,EAAD,MAED,mDCHOqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3c17252e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1WUTs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"CurrentWeather_TextInput__9TzCL\",\"Radio\":\"CurrentWeather_Radio__3DNee\",\"Button\":\"CurrentWeather_Button__LcK0s\",\"Small\":\"CurrentWeather_Small__1_1ZY\",\"Loader\":\"CurrentWeather_Loader__3WkHz\",\"spin\":\"CurrentWeather_spin__8NDBv\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport classes from './Conditions.module.css'\n\nconst conditions = (props) => {\n   return (\n    <div className={classes.Wrapper}>\n            {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\n\n            {props.loading && <div className={classes.Loader} />}\n\n\n            {props.responseObj.cod === 200 ?\n               <div>\n                   <p><strong>{props.responseObj.name}</strong></p>\n                   <p>It is currently {Math.round(props.responseObj.main.temp)} degrees celsius out with {props.responseObj.weather[0].description}.\n                    Today, the highest temparature observed would be{props.responseObj.main.temp_max} degree celsius\n                    while the lowest would be{props.responseObj.main.temp_min} degree celsius.</p>\n               </div>\n           : null\n           }\n       </div>\n   )\n}\n\nexport default conditions;","import React, { useState } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './CurrentWeather.module.css'\n\n\nconst apiKey= process.env.REACT_APP_API_KEY;\nconst CurrentWeather = () => {\n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('metric');\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n   let [responseObj, setResponseObj] = useState({});\n\n\n   function getCurrentWeather(e) {\n    e.preventDefault();\n    if (city.length === 0) {\n        return setError(true);\n    }\n    // Clear state in preparation for new data\n    setError(false);\n    setResponseObj({});\n   \n    setLoading(true);\n   \n    let uriEncodedCity = encodeURIComponent(city);\n    \n    fetch(`https://api.openweathermap.org/data/2.5/weather?units=${unit}&q=${uriEncodedCity}&appid=${apiKey}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n            \"accept\": \"application/json\"\n        }\n    })\n    .then(response => response.json())\n   .then(response => {\n       if (response.cod !== 200) {\n           throw new Error()\n       }\n       setResponseObj(response);\n       setLoading(false);\n   })\n   .catch(err => {\n       setError(true);\n       setLoading(false);\n       console.log(err.message);\n   });\n   }\n\n   return (\n    <div>\n        <h2>Find Current Weather Conditions</h2>\n            <form onSubmit={getCurrentWeather}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    className={classes.textInput}\n                    value={city}\n                    onChange={(e) => setCity(e.target.value)}\n                    />\n                    <button  className={classes.Button} type=\"submit\">Get Current Weather</button>\n            </form>\n        <Conditions\n            responseObj={responseObj}\n            error={error} \n            loading={loading} \n            />\n    </div>\n   )\n}\n\nexport default CurrentWeather;","import logo from './logo.svg';\nimport './App.css';\nimport CurrentWeather from './components/CurrentWeather/CurrentWeather';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1> Weather App for Thinkify </h1>\n      </header>\n      <main>\n         <CurrentWeather />\n        </main>\n        <footer>\n              Copyright\n        </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}